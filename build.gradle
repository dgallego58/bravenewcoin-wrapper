plugins {
    id 'org.springframework.boot' version '2.3.8.RELEASE'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "org.sonarqube" version "3.0"
    id 'jacoco'
    id 'java'
    id 'idea'
}

group = 'co.com.bancolombia'
version = '1.0.0'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    //token and securities
    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    implementation 'com.auth0:java-jwt:3.12.0'

    //api docs
    implementation 'org.springdoc:springdoc-openapi-data-rest:1.5.3'
    implementation 'org.springdoc:springdoc-openapi-ui:1.5.3'
    implementation 'org.springdoc:springdoc-openapi-security:1.5.3'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    implementation 'org.mockito:mockito-inline:3.7.7'
    testImplementation 'io.projectreactor:reactor-test'
}

test {
    useJUnitPlatform()
}
sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.source", "src/main/java"
        property "sonar.tests", "src/test/java"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.java.binaries", "build/classes/java/main"
        property "sonar.java.test.binaries", "build/classes/java/test"
        property "sonar.coverage.exclusions", "**/*DTO*.java, **/config/**"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
    }
}


jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("build/reports/jacoco")
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/dto/**',
                              '**/*Configuration*', '**/entities/**', '**/config/security/**',
                    '**/client/**'])//this one is integration
        }))
    }
}